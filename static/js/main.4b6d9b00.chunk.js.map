{"version":3,"sources":["components/Todoform.js","components/Todo.js","components/Todolist.js","App.js","index.js"],"names":["Todoform","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","classname","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","className","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","is","Todolist","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAsDeA,MApDf,SAAkBC,GACd,MAAwBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,KAAjE,mBAAMC,EAAN,KAAYC,EAAZ,KACMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAWtB,OACG,sBAAMW,UAAU,YAAYC,SAVV,SAAAH,GACjBA,EAAEI,iBACFhB,EAAMe,SAAS,CACXE,GAAGC,KAAKC,MAAsB,IAAhBD,KAAKE,UACnBC,KAAMjB,IAETC,EAAS,KAIX,SACKL,EAAME,KACP,qCACA,uBACAoB,KAAK,OACLC,YAAY,oBACZpB,MAAOC,EAAOoB,KAAK,OACnBC,UAAU,kBACVC,SAAUf,EACVgB,IAAKrB,IAEL,wBAAQmB,UAAU,mBAAlB,+BAGC,qCACA,uBACAH,KAAK,OACLC,YAAY,WACZpB,MAAOC,EAAOoB,KAAK,OACnBC,UAAU,aACVC,SAAUf,EACVgB,IAAKrB,IAEL,wBAAQmB,UAAU,cAAlB,8B,sBCKGG,MA5Cf,YAA+D,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAeC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC7C,EAAuB/B,mBAAS,CAC5BgB,GAAG,KACHd,MAAO,KAFX,mBAAOD,EAAP,KAAY+B,EAAZ,KAaA,OAAG/B,EAAKe,GACG,cAAC,EAAD,CAAWf,KAAMA,EAAMa,SATb,SAAAZ,GACjB6B,EAAW9B,EAAKe,GAAGd,GACnB8B,EAAQ,CACJhB,GAAG,KACHd,MAAO,QAQR0B,EAAMK,KAAI,SAACC,EAAKC,GAAN,OACb,sBACCX,UAAWU,EAAKE,WAAa,oBAAsB,WADpD,UAII,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKI,KAApD,SACCJ,EAAKd,MADIc,EAAKlB,IAGf,sBAAKQ,UAAU,QAAf,UACA,cAAC,IAAD,CACAa,QAAS,kBAAMP,EAAWI,EAAKlB,KAC/BQ,UAAY,gBAEZ,cAAC,IAAD,CACAa,QAAS,kBAAML,EAAQ,CAAChB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QACjDI,UAAY,qBAZVW,OCmCCI,MA3Df,WACI,MAAwBvC,mBAAS,IAAjC,mBAAM4B,EAAN,KAAaY,EAAb,KA4CA,OACI,gCACG,6DACA,cAAC,EAAD,CAAU1B,SA5CD,SAAAoB,GACZ,GAAKA,EAAKd,OAAQ,QAAQqB,KAAKP,EAAKd,MAApC,CAGA,IAAMsB,EAAQ,CAAIR,GAAJ,mBAAaN,IAC3BY,EAASE,OAwCN,cAAC,EAAD,CACAd,MAAOA,EACPC,aAlBc,SAAAb,GACjB,IAAI2B,EAAef,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKlB,KAAOA,IACXkB,EAAKE,YAAcF,EAAKE,YAErBF,KAGXM,EAASG,IAWNb,WA5BY,SAAAd,GACf,IAAM4B,EAAY,YAAIhB,GAAOiB,QAAO,SAAAX,GAAI,OAAIA,EAAKlB,KAAOA,KAExDwB,EAASI,IA0BNb,WAxCY,SAACe,EAAQC,GACnBA,EAAS3B,OAAQ,QAAQqB,KAAKM,EAAS3B,OAG5CoB,GAAS,SAAAQ,GAAI,OAAIA,EAAKf,KAAI,SAAAgB,GAAI,OAAKA,EAAKjC,KAAO8B,EAASC,EAAWE,eCN5DC,MARf,WACE,OACE,qBAAK1B,UAAU,WAAf,SACA,cAAC,EAAD,OCLJ2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4b6d9b00.chunk.js","sourcesContent":["import React, {useState, useEffect , useRef} from 'react'\r\n\r\nfunction Todoform(props) {\r\n    const[input,setInput] = useState(props.edit ? props.edit.value : ' ');\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(()=>{\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e=>{\r\n        setInput(e.target.value)\r\n    }\r\n    const handlesubmit = e =>{\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n            id:Math.floor(Math.random() * 1000),\r\n            text: input\r\n        });\r\n         setInput('');\r\n\r\n    } \r\n    return (\r\n       <form classname='todo-form' onSubmit={handlesubmit}>\r\n           {props.edit ? (\r\n           <>\r\n           <input \r\n           type='text' \r\n           placeholder='Update your Tasks'\r\n           value={input} name='text'\r\n           className='todo-input edit'\r\n           onChange={handleChange}\r\n           ref={inputRef}\r\n           />\r\n           <button className='todo-button edit'> Update To-do </button>\r\n           </>) : \r\n           (\r\n            <>\r\n            <input \r\n            type='text' \r\n            placeholder='Add todo'\r\n            value={input} name='text'\r\n            className='todo-input'\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n            />\r\n            <button className='todo-button'> Add To-do</button>\r\n            </>\r\n           )}\r\n           \r\n       </form>\r\n    )\r\n}\r\n\r\nexport default Todoform\r\n\r\n","import React, {useState} from 'react';\r\nimport Todoform from './Todoform';\r\nimport Todolist from './Todolist';\r\nimport {MdDeleteForever} from 'react-icons/md';\r\nimport {FiEdit} from 'react-icons/fi';\r\n\r\n\r\nfunction Todo({todos, completeTodo , removeTodo, updateTodo}) {\r\n    const [edit,setEdit] = useState({\r\n        id:null,\r\n        value: ''\r\n    })\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id,value)\r\n        setEdit({\r\n            id:null,\r\n            value: ''\r\n        });\r\n    };\r\n    \r\n    if(edit.id){\r\n        return <Todoform  edit={edit} onSubmit={ submitUpdate }/>;\r\n    }\r\n\r\n    return todos.map((todo,index)=>(\r\n        <div \r\n         className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n         key={index}\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.is)}>\r\n            {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n            <MdDeleteForever\r\n            onClick={() => removeTodo(todo.id)}\r\n            className = 'delete-icon'\r\n            />\r\n            <FiEdit\r\n            onClick={() => setEdit({id: todo.id, value :todo.text})}\r\n            className = 'delete-icon'\r\n            />\r\n            </div>\r\n            \r\n\r\n         </div>\r\n    )) \r\n\r\n    \r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport Todoform from './Todoform'\r\nimport Todo from './Todo'\r\n\r\nfunction Todolist() {\r\n    const[todos, setTodos] =useState([]);\r\n\r\n\r\n    const addTodo = todo =>{\r\n        if( !todo.text || /^\\s*$/.test(todo.text)){\r\n            return\r\n        }\r\n        const newTodos = [todo, ...todos];\r\n        setTodos(newTodos);\r\n       \r\n    };\r\n\r\n    const updateTodo = (todoId ,newValue) =>{\r\n        if( !newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    const removeTodo = id =>{\r\n        const removeArr = [...todos].filter(todo => todo.id !== id )\r\n\r\n        setTodos(removeArr)\r\n    };\r\n\r\n    \r\n\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo =>{\r\n            if(todo.id === id){\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        \r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n           <h1>Hey Hardik  plan your day !</h1> \r\n           <Todoform onSubmit={addTodo} />\r\n           <Todo\r\n           todos={todos}\r\n           completeTodo = {completeTodo}\r\n           removeTodo={removeTodo}\r\n           updateTodo={updateTodo}\r\n           />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todolist\r\n","\nimport './App.css';\nimport Todoform from './components/Todoform';\nimport Todolist from './components/Todolist';\n\n\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n    <Todolist/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}